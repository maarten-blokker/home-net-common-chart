suite: Test suite for service resource

tests:
  - it: renders no service when there are no ports
    documentSelector: &ServiceDocument
      path: kind
      value: Service
      skipEmptyTemplates: true
    set:
      ports: []
    asserts:
      - hasDocuments:
          count: 0
          filterAware: true

  - it: renders no service when there are no service ports
    documentSelector: *ServiceDocument
    set:
      ports:
        - name: web
          containerPort: 8080
    asserts:
      - hasDocuments:
          count: 0
          filterAware: true

  - it: renders a service when a service port is defined
    documentSelector: *ServiceDocument
    set:
      ports:
        - name: web
          containerPort: 80
          servicePort: 8080
    asserts:
      - equal:
          path: spec.ports
          value:
            - name: web
              port: 8080
              targetPort: web
              protocol: TCP
      - equal:
          path: spec.type
          value: ClusterIP

  - it: renders a service with the correct annotations
    documentSelector: *ServiceDocument
    set:
      ports:
        - name: web
          containerPort: 80
          servicePort: 8080
      service:
        annotations:
          metallb.universe.tf/ip-allocated-from-pool: metallb-pool
    asserts:
      - equal:
          path: metadata.annotations
          value:
            metallb.universe.tf/ip-allocated-from-pool: metallb-pool

  - it: fails when specifying a loadbalancer IP when service is not type LoadBalancer
    set:
      service:
        type: ClusterIP
        loadBalancerIP: 1.1.1.1
      ports:
        - name: web
          containerPort: 80
          servicePort: 8080
    asserts:
      - failedTemplate:
          errorPattern: "loadBalancerIP specified, but service is not of type 'LoadBalancer'"

  - it: renders a service with type LoadBalancer
    documentSelector: *ServiceDocument
    set:
      service:
        type: LoadBalancer
      ports:
        - name: web
          containerPort: 80
          servicePort: 8080
    asserts:
      - equal:
          path: spec.type
          value: LoadBalancer

  - it: renders a service with type LoadBalancer and load balancer IP
    documentSelector: *ServiceDocument
    set:
      service:
        type: LoadBalancer
        loadBalancerIP: 1.1.1.1
      ports:
        - name: web
          containerPort: 80
          servicePort: 8080
    asserts:
      - equal:
          path: spec.type
          value: LoadBalancer
      - equal:
          path: spec.loadBalancerIP
          value: 1.1.1.1

  - it: renders a service with multiple ports
    documentSelector: *ServiceDocument
    set:
      ports:
        - name: web
          containerPort: 80
          servicePort: 8080
        - name: metrics
          containerPort: 90
          servicePort: 9090
          protocol: UDP
    asserts:
      - equal:
          path: spec.ports
          value:
            - name: web
              port: 8080
              targetPort: web
              protocol: TCP
            - name: metrics
              port: 9090
              targetPort: metrics
              protocol: UDP
