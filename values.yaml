replicaCount: 1

image:
  repository: "nginx"
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ports:
  ## Define a list of ports available
  - name: http
    containerPort: 8080
    servicePort: 80
    # protocol: TCP

service:
  type: ClusterIP

## Configure environment variables for the container
##
## Example:
## envVars:
##   - name: TZ
##     value: Europe/Amsterdam
##   - name: DB_USER
##     valueFrom:
##       configMapKeyRef:
##         name: app-config
##         key: db-user
##   - name: DB_PASS
##     valueFrom:
##       secretKeyRef:
##         name: app-secrets
##         key: db-password
envVars: []

## Configure a base set of environment variables, to be overridden by any environment variables specified by `envVars`
envVarsBase: []

## Configure liveness probe, checks if the container is still running as expected. If the liveness probe fails,
## the kubelet kills the container.
##
## See: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
##
## Example:
## livenessProbe:
##   enabled: true
##   httpGet:
##     path: /
##     port: http
##     httpHeaders:
##       - name: Custom-Header
##         value: Awesome
##   grpc: { port: 2379 }
##   tcpSocket: { port: http }
##   exec:
##     command: [ "cat", "/tmp/healthy" ]
##   initialDelaySeconds: 0
##   periodSeconds: 10
##   timeoutSeconds: 1
##   failureThreshold: 3
##   successThreshold: 1
##
livenessProbe:
  enabled: false
  initialDelaySeconds: 5
  periodSeconds: 5
  failureThreshold: 3

## Configure readiness probe, which checks if the container is ready to handle traffic. If it fails, the pod will be
## removed from the pool of available endpoints for services.
##
## See: check livenessProbe reference
readinessProbe:
  enabled: false
  initialDelaySeconds: 5
  periodSeconds: 5
  failureThreshold: 3

## Configure startup probe, which checks if a container has successfully started, preventing premature termination for
##  containers with long initialization times.
##
## See: check livenessProbe reference
startupProbe:
  enabled: false
  initialDelaySeconds: 10
  periodSeconds: 1

## Additional volumes to be mounted, such as NFS, hostPath, or emptyDir.
volumes: [ ]
## Example:
##   - name: nfs-volume
##     nfs:
##       server: 10.0.0.1
##       path: /exports/shared
##     mount:
##       mountPath: /mnt/nfs
##
##   - name: host-logs
##     hostPath:
##       path: /var/log/my-app
##       type: DirectoryOrCreate
##     mount:
##       mountPath: /logs
##
##   - name: temp-storage
##     emptyDir: {}
##     mount:
##       mountPath: /tmp

## List of PersistentVolumeClaims to be created and mounted into the pod.
## Each entry defines both the claim (spec) and its mount path.
persistentVolumeClaims: [ ]
## Example:
## persistentVolumeClaims:
##   - name: data                         # Unique identifier (used in PVC name and volume reference)
##     accessModes: ["ReadWriteOnce"]     # Access mode: RWO, ROX, or RWX (default: ReadWriteOnce)
##     storageClassName: standard         # Optional: specify a StorageClass (omit to use default)
##     resources:
##       requests:
##         storage: 1Gi                   # Requested storage size (e.g., 500Mi, 1Gi)
##     mount:
##       mountPath: /data                      # Mount path inside the container
##       readOnly: true
##       subPath: downloads

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local

      ## @param ingress.hosts.path Define how incoming requests are routed to services based on URL.
      ##
      ## Example:
      ##
      ## paths:
      ##   - path: /
      ##     pathType: ImplementationSpecific

  ## @param ingress.tls Ingress TLS Configuration
  ##
  ## If `ingress.tls` is set to an empty array, TLS configuration is omitted.
  ##
  ## Example:
  ##  tls: []
  ##
  ## If `ingress.tls` is defined with hosts â†’ Uses `.Values.ingress.tls`
  ##
  ## Example:
  ##  tls:
  ##    - hosts:
  ##        - chart-example.local
  ##      secretName: chart-example.local-tls
  ##
  ## If `ingress.tls` is missing but `ingress.hosts` is defined a default configuration block is generated.

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  ## Set to true to enable Horizontal Pod Autoscaler (HPA)
  enabled: false
  ## Minimum number of replicas allowed
  minReplicas: 1
  ## Maximum number of replicas allowed
  maxReplicas: 3
  ## Target CPU utilization percentage for scaling
  # targetCPUUtilizationPercentage: 80
  ## Target Memory utilization percentage for scaling
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
